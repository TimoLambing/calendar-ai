generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://coinbeats_prod_user:Onamission%23007@116.203.35.19:5433/calendar_prod_db"
}

model Wallet {
  // Use address as the primary key
  address   String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // For diaries
  diaryEntries TradingDiaryEntry[]

  // For daily snapshots
  snapshots WalletSnapshot[]

  // If you still use the older single-coin Snapshot model
  Snapshot Snapshot[]

  // Self many-to-many relation for "following" & "followedBy"
  following  Wallet[] @relation("WalletFollows")
  followedBy Wallet[] @relation("WalletFollows")
}

model TradingDiaryEntry {
  id             String            @id @default(cuid())
  comment        String
  timestamp      DateTime
  portfolioValue Float
  valueChange    Float
  createdAt      DateTime          @default(now())
  authorAddress  String

  // References Wallet.address
  walletAddress String
  wallet        Wallet            @relation(fields: [walletAddress], references: [address])
  comments      TradingDiaryComment[]
}

model TradingDiaryComment {
  id            String            @id @default(cuid())
  comment       String
  createdAt     DateTime          @default(now())
  authorAddress String

  entryId String
  entry   TradingDiaryEntry @relation(fields: [entryId], references: [id])
}

model WalletSnapshot {
  id         String         @id @default(cuid())
  timestamp  DateTime
  totalValue Float
  createdAt  DateTime       @default(now())

  // Reference the wallet's address
  walletAddress String
  wallet        Wallet       @relation(fields: [walletAddress], references: [address])

  balances     CoinBalance[]
  transactions Transaction[]
}

model CoinBalance {
  id        String         @id @default(cuid())
  symbol    String
  amount    Float
  valueUsd  Float
  timestamp DateTime

  // Add optional fields for token logos
  logo       String?
  thumbnail  String?

  snapshotId String
  snapshot   WalletSnapshot @relation(fields: [snapshotId], references: [id])
}

model Transaction {
  id           String         @id @default(cuid())
  symbol       String
  type         String
  amount       Float
  valueUsd     Float
  timestamp    DateTime
  currentValue Float?

  snapshotId String
  snapshot   WalletSnapshot @relation(fields: [snapshotId], references: [id])
}

// If you still want the older single-coin snapshot approach
model Snapshot {
  id         String   @id
  timestamp  DateTime
  totalValue Float
  symbol     String
  createdAt  DateTime @default(now())
  name       String
  logo       String
  thumbnail  String

  walletAddress String
  Wallet        Wallet   @relation(fields: [walletAddress], references: [address])
}
